/*
LogList: takes an array of objects (logs) and width as props and then returns a component that is virtualized list of 
all logs.  Each log in the list can be expanded to display the entire log messgae in formatted JSON

props:
width, items

Packages Used:
styled-components, react-virtualized, react-json-view


*/
import React, { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { List, CellMeasurer, CellMeasurerCache  } from 'react-virtualized';
import ReactJson from 'react-json-view';
import downArrow from '../resources/arrow.png';
import rightArrow from '../resources/right_arrow.png'

const LogContainer = styled.div`
    border-bottom: 1px solid #999;
    &:nth-child(odd) {
        background-color:${props => props.isOpen ?'rgb(185, 198, 201)':'rgb(223, 231, 232)'}
    }
        &:nth-child(even) {
    background-color: ${props => props.isOpen ?'rgb(185, 198, 201)':'rgb(244, 244, 244)'};
    }
`;
const ListContainer = styled.div`
`;
const LogLine = styled.div`
  display: flex;
  flex-direction: row;
  width:100%;
  padding:5px;
  
`;
const LogHeader = styled.div`
  border-bottom: 1px solid #999;
  border-top: 1px solid #999;
  padding:5px;
  font-weight:bold;
  display: flex;
  flex-direction: row;
  width:100%;
  background-color:rgb(228, 235, 234)
`;
const Time = styled.div`
    width: 20%;
`;
const Event = styled.div`
    width: 80%;
    white-space: nowrap;
overflow: hidden;
text-overflow: ellipsis;
`;
const ExpandedView = styled.div`
    padding:10px;
    flex-direction: row;
    width: 100%;
    background-color:#FFF;
`;
const ExpandButton = styled.img`
    width: 10px;
    height: 10px;
    margin:0px;
    cursor: pointer;
    border:0;
`;

function LogList({items, width}){
  const [openIndex,setOpenIndex] = useState(null); // stores the index of the currently expanded row, given this is an index only one row can be expanded at one time.

  const cache = useRef(new CellMeasurerCache({
    fixedWidth: true,
    defaultHeight: 30,
  }));
  
  const handleOpen = (index)=>{
    if(openIndex === index) setOpenIndex(null);
    else setOpenIndex(index);
  };

  const rowRenderer = ({index,key, style, parent })=> {
  // rowRenderer: function used by the virtualized list to render each row.  Takes the current index, key, style, and parent generated by the virtual list as input and returns markup for eahc row
    return (
      <CellMeasurer 
        cache={cache.current} 
        columnIndex={0} 
        key={key} 
        rowIndex={index} 
        parent={parent}
      >
        {({ measure, registerChild }) => (
    <Log registerChild={registerChild} style={style} index={index} measure={measure} currentlyOpened={openIndex} />
    )}
    </CellMeasurer>);
  }
  
  function Log({registerChild,style,index, measure, currentlyOpened}){
    // Log: takes registerChild,style,index, measure, openIndex as props and returns a react component of an expandle row
    useEffect(() => {   
      measure(); 
  }, [index===currentlyOpened]); // It only takes the current measurement of a given row if that row is currently expanded
    return (
    <LogContainer ref={registerChild} $isOpen={currentlyOpened === index} style={style}>
      <LogLine>
        <Time>
          <ExpandButton src={currentlyOpened === index?downArrow:rightArrow} onClick={()=>{ handleOpen(index);}} /> {items[index].timeStamp}
        </Time>
          <Event>{items[index].msg}</Event>
      </LogLine>
      {currentlyOpened === index&&<ExpandedView><ReactJson src={JSON.parse(items[index].msg)} /></ExpandedView>}
    </LogContainer>
    );
  }

  return (
    <ListContainer  id="log-list">
      <LogHeader><Time>Time</Time><Event>Event</Event></LogHeader>
      <List
          width={width}
          height={400}
          rowCount={items.length}
          rowHeight={cache.current.rowHeight}
          deferredMeasurementCache={cache.current}
          rowRenderer = {rowRenderer}
        />
    </ListContainer>
  );
  
  }

export default LogList;